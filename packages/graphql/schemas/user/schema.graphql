type User {
  id: Int
  email: String
  name: String
  image: String
  created_at: Date
  updated_at: Date
  email_verified: Date
  role_id: Int
  status: String
  role: Role
  havePassword: Boolean

  userMeta: [UserMeta]
  phone: String
  address: String
  customerType: Int
  facebookUrl: String
}

input UserWhere {
  id: Int
  name: String
  role_id: Int
  status: String
  email: String
  metadata: [UserInput]
  taxonomies: [Int]
}

input UserInput {
  id: Int
  name: String
  image: String
  email: String
  status: String
  role_id: Int

  phone: String
  address: String
  customerType: Int
  facebookUrl: String
}

input UserMetaInput{
  user_id: Int
  type: String
  key: String
  value: String
}

type UsersPaged {
  rows: [User]
  count: Int
}

type Query {
  user(where: UserWhere): User
  users(where: UserWhere, limit: Int, offset: Int): UsersPaged 
  loginUser(email: String!, password: String!): User
}

type Mutation {
  createUser(data: UserInput): User
  upsertUser(data: UserInput, metadata: [UserMetaInput], taxonomies: [Int]): User
  changePassword(currentPassword: String!, password: String!): BooleanResponse @isAuth
}
